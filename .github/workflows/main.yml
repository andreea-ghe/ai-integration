name: GPT Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  code_review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq
          curl -fsSL https://ollama.com/install.sh | sudo -E sh
          nohup ollama serve &
          sleep 5
          curl -i http://localhost:11434
          python3 -m pip install --upgrade pip
          pip install litellm openai python-dotenv

      - name: Fetch Base Branch
        run: git fetch origin main

      - name: Get Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v34

      - name: List All Changed Files
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed"
          done

      - name: Create Diffs Directory
        run: mkdir -p diffs

      - name: Get File Diffs
        run: |
          changed_files="${{ steps.changed-files.outputs.all_changed_files }}"
          echo "Generating diffs for: $changed_files"
          for file in $changed_files; do
            git diff origin/main -- $file > diffs/$file.diff
          done

      - name: Run Python Script
        id: run-script
        run: |
          changed_files="${{ steps.changed-files.outputs.all_changed_files }}"
          echo "Running chatbot.py with files: $changed_files"
          python3 chatbot.py "$changed_files" > script_output.txt
          cat script_output.txt

      - name: Parse and Output Reviews
        id: parse-output
        run: |
          reviews=""
          while IFS= read -r line; do
            if [[ "$line" == "FILE:"* ]]; then
              file=$(echo $line | cut -d' ' -f2)
            elif [[ "$line" == "REVIEW:"* ]]; then
              review=$(echo $line | cut -d' ' -f2-)
            elif [[ "$line" == "ENDREVIEW" ]]; then
              reviews="$reviews\n$file=$review"
            fi
          done < script_output.txt
          echo -e "$reviews" > reviews.txt
          cat reviews.txt

      - name: Get Latest Commit ID
        id: get_commit
        run: echo "commit_id=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Add Code Suggestions Comments
        run: |
          commit_id=${{ env.commit_id }}
          cat reviews.txt | while read -r line; do
            file=$(echo $line | cut -d= -f1)
            review=$(echo $line | cut -d= -f2-)
            diff_file="diffs/$file.diff"
            if [ -f "$diff_file" ]; then
              line_number=$(grep -n "^+" "$diff_file" | head -n 1 | cut -d: -f1)
              echo "Posting review for $file at line $line_number"
              curl -s -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.MY_GITHUB_TOKEN }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}/comments \
                -d "$(jq -n --arg body "$review" --arg path "$file" --argjson line $line_number --arg commit_id "$commit_id" '{body: $body, path: $path, line: $line, commit_id: $commit_id}')"
            fi
          done
